name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Tests, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Tests, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Tests, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, etc.) customize the build_type list.
      matrix:
        build_type: [Tests]
        # os: [windows-latest, ubuntu-latest, macos-latest]
        # os: [ubuntu-latest, macos-latest]
        os: [macos-latest]
        include:
            # - os: windows-latest
            #   c_compiler: cl
            #   cpp_compiler: cl
            #   executable:
            # - os: ubuntu-latest
            #   c_compiler: gcc
            #   cpp_compiler: g++
            #   executable:
            # - os: ubuntu-latest
            #   c_compiler: clang
            #   cpp_compiler: clang++
            #   executable:
            - os: macos-latest
              c_compiler: clang
              cpp_compiler: clang++
              executable: Gatality.app

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        version: 6.8.*

    - name: Build with CMake
      uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{ steps.strings.outputs.build-output-dir }}
        cc: ${{ matrix.c_compiler }}
        cxx: ${{ matrix.cpp_compiler }}
        build-type: ${{ matrix.build_type }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: List files
      run: ls ${{ steps.strings.outputs.build-output-dir }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./${{ matrix.executable }}
      # run: Gatality_tests
