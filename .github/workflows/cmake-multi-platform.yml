name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Tests, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Tests, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Tests, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, etc.) customize the build_type list.
      matrix:
        build_type: [Debug]
        # os: [windows-latest, ubuntu-latest, macos-latest]
        # os: [ubuntu-latest, macos-latest]
        os: [windows-latest]
        include:
            - os: windows-latest
              c_compiler: cl
              cpp_compiler: cl
              runExecutable: .\Debug\Gatality_tests.exe
            - os: ubuntu-latest
              c_compiler: gcc
              cpp_compiler: g++
              runExecutable: .\Debug\Gatality_tests.exe
            # - os: ubuntu-latest
            #   c_compiler: clang
            #   cpp_compiler: clang++
            #   runExecutable:
            # - os: macos-latest
            #   c_compiler: clang
            #   cpp_compiler: clang++
            #   runExecutable: ./Gatality_tests

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Install Vulkan SDK
      uses: jakoch/install-vulkan-sdk-action@v1
      with:
          # You can set the Vulkan SDK version to download.
          # Defaults to latest version, if version not set.
          vulkan_version: 1.3.231.1
          optional_components: com.lunarg.vulkan.vma
          install_runtime: true
          cache: true
          stripdown: true

          # You can install a software rasterizer.
          install_swiftshader: true
          install_lavapipe: true

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Build with CMake
      uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{ steps.strings.outputs.build-output-dir }}
        cc: ${{ matrix.c_compiler }}
        cxx: ${{ matrix.cpp_compiler }}
        configure-options: "-DGATALITY_BUILD_TESTS=ON"
        target: Gatality_tests
        build-type: ${{ matrix.build_type }}

    - name: List files
      run: ls ${{ steps.strings.outputs.build-output-dir }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ${{ matrix.runExecutable }}
      # run: Gatality_tests
