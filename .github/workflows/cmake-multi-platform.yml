name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Tests, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Tests, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Tests, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, etc.) customize the build_type list.
      matrix:
        build_type: [Debug]
        # os: [windows-latest, ubuntu-latest, macos-latest]
        # os: [ubuntu-latest, macos-latest]
        os: [windows-latest]
        include:
            - os: windows-latest
              c_compiler: cl
              cpp_compiler: cl
              runExecutable: .\Debug\Connection_Machine_tests.exe
            - os: ubuntu-latest
              c_compiler: gcc
              cpp_compiler: g++
              runExecutable: ./Connection_Machine_tests
            # - os: ubuntu-latest
            #   c_compiler: clang
            #   cpp_compiler: clang++
            #   runExecutable: ./Connection_Machine_tests
            # - os: macos-latest
            #   c_compiler: clang
            #   cpp_compiler: clang++
            #   runExecutable: ./Connection Machine_tests

    steps:
    - uses: actions/checkout@v4

    - name: Cache CMake dependency source code
      uses: actions/cache@v2
      env:
        cache-name: cache-cmake-dependency-sources
      with:
        # CMake cache is at ${{github.workspace}}/build/_deps but we only will cache folders ending in '-src' to cache source code
        path: ${{github.workspace}}/external/*
        # Cache hash is dependent on CMakeLists files anywhere as these can change what's in the cache, as well as cmake modules files
        key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
        # it's acceptable to reuse caches for different CMakeLists content if exact match is not available and unlike build caches, we
        # don't need to restrict these by OS or compiler as it's only source code that's being cached
        restore-keys: |
          ${{ env.cache-name }}-

    - name: Cache CMake dependency build objects
      uses: actions/cache@v2
      env:
        cache-name: cache-cmake-dependency-builds
      with:
        # CMake cache is at ${{github.workspace}}/build/_deps but we only care about the folders ending in -build or -subbuild
        path: |
          ${{github.workspace}}/build/_deps/*-build
          ${{github.workspace}}/build/_deps/*-subbuild
        # Cache hash is dependent on CMakeLists files anywhere as these can change what's in the cache, as well as cmake modules files
        key: ${{ env.cache-name }}-${{ matrix.os }}-${{ matrix.cxx }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
        # it's acceptable to reuse caches for different CMakeLists content if exact match is not available
        # as long as the OS and Compiler match exactly
        restore-keys: |
          ${{ env.cache-name }}-${{ matrix.os }}-${{ matrix.cxx }}-

    - name: Install Vulkan SDK
      uses: humbletim/install-vulkan-sdk@v1.2
      with:
         version: 1.4.309.0
         cache: true

    - name: Install Dependencies
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install gperf build-essential bison flex libfl-dev libreadline-dev gawk tcl-dev libffi-dev git graphviz xdot pkg-config python3 libboost-system-dev libboost-python-dev libboost-filesystem-dev zlib1g-dev libbz2-dev

    - name: Build with CMake
      uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{ github.workspace }}/build
        cc: ${{ matrix.c_compiler }}
        cxx: ${{ matrix.cpp_compiler }}
        configure-options: "-DCONNECTION_MACHINE_BUILD_TESTS=ON -DCONNECTION_MACHINE_BUILD_APP=OFF"
        target: Connection_Machine_tests
        build-type: ${{ matrix.build_type }}

    - name: List files
      run: ls ${{ github.workspace }}/build

    - name: Test
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ${{ matrix.runExecutable }}
      # run: Gatality_tests
